// Code generated by go-bindata.
// sources:
// fsm.js
// DO NOT EDIT!

package fsm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fsmJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x5a\x7f\x6f\x1b\xb9\x11\xfd\x3f\x9f\x82\xe7\x03\x4e\x52\xa3\xe8\x1c\xa7\x45\x01\xa9\xea\xc1\xb5\xd5\xd6\xa8\xeb\x1c\xec\xf4\x8a\x42\x10\x0a\x7a\x45\x49\xdb\x93\xb8\xc2\x72\xd7\x8a\xe0\xe8\xbb\xf7\xcd\x90\xbb\x4b\xae\x7e\x58\xce\x45\xfa\x27\x5e\x2e\x77\xe6\xcd\xcc\xe3\x70\x38\xcc\x93\x4c\xc5\x43\x26\x33\xf5\x4f\x19\xcd\x62\xad\x44\x5f\x3c\xbf\x79\x23\xf0\xfb\xf1\xc7\x77\xdf\xee\x67\x45\xfe\x32\xb8\x7f\xb8\xf9\x78\xd7\x15\x67\x17\x9d\x0f\x9d\x3f\x9c\xb5\x4f\xa6\xe9\x5e\x99\x7c\x9e\x75\x61\x8b\xe0\xdf\xc3\xbf\xae\xae\x06\x83\xeb\xc1\x75\x97\x9e\xde\xb7\xa1\x53\x64\x33\x25\xd4\x93\xd2\x99\xc8\x52\xa9\x4d\x9c\xc5\x89\x56\x63\x61\xf2\x28\x52\xc6\x4c\xf2\xf9\x7c\x2d\x26\x69\xb2\x10\x18\x16\x86\x7c\x24\xb2\x44\x48\x9d\xe0\xc3\xd4\xc9\xbd\xfb\xf8\xe9\xfe\xf2\xee\xe1\xe6\x13\x9b\x75\x51\x93\xbb\x92\xc6\x17\x27\x1e\xf3\x4c\xe8\xa4\x90\x55\x2a\xe5\x79\x5a\xd1\x34\x99\xae\x9d\xe4\xab\xcb\xbb\xab\xc1\xed\xad\x43\xfc\x61\x87\xe4\x48\xea\x48\xcd\xe7\x80\xfc\xb8\xe6\x57\x91\xc4\x53\x2a\x62\x2d\xa4\x78\x54\x93\x24\x55\x03\x9e\x4c\xe3\x8f\x32\xfa\xd5\x49\xfe\x79\x70\x77\x7d\x73\xf7\xb7\xae\x7d\xfa\xbd\x08\x25\xc7\x46\x48\xb3\xd6\xd1\x2c\x4d\x74\x92\xe3\x41\x8f\x03\xe1\x86\xe4\x47\x89\xce\xd2\x64\x2e\x92\x89\x58\xcd\x94\xe6\x09\x9e\x3d\x49\x14\xe5\xa9\x61\x75\x1b\x17\xe3\x41\x9a\x26\x69\x15\x8f\x9b\xbb\x5f\x2e\x6f\x6f\xae\xff\xeb\x7b\xef\xfd\xf9\x39\x5b\xe9\x34\x65\x69\x0c\xd3\xe0\xf1\x49\x9c\x2a\xc0\x28\x62\x35\x93\xd6\xfc\x58\x6b\xb9\x4c\x93\x65\x1a\x93\x37\x63\x0b\x02\x7a\x53\x9a\xc5\x2e\x0e\xed\x0d\x74\x5d\x1c\xa5\x6b\x35\x8b\xe7\xfc\xc8\x1e\xa9\x47\xcc\x64\x31\x62\xba\x54\x7a\x1c\xeb\x69\xcd\xae\xab\xcb\xdb\xdb\xbf\x5c\x5e\xfd\x83\x9c\xfc\xe1\xfc\xdc\x53\x05\xc8\x4f\xf1\x18\xda\x8a\xa8\x88\x49\xae\x23\x16\x9a\xcd\x52\xb5\x62\xed\x9f\x23\xb5\xa4\xa1\xc0\x85\xff\xbe\xb9\xbd\xbe\xba\xbc\x07\x21\x1a\xbf\x6b\xb4\x79\xe8\xf2\xe1\x3f\x77\x57\x78\x66\x7c\x8d\xd3\x2d\xa7\x28\x55\xf0\x67\xb7\x84\xda\x8c\x26\xd3\xb6\xc8\x64\x3a\x55\x59\xab\x48\x18\x42\x50\x32\x89\x35\x3c\x24\xe7\x76\xa0\x2f\x9a\xd9\x7a\xa9\x40\x13\x7c\xd0\x29\x5e\xf5\xfb\xa2\x61\xe0\x72\x3d\x6d\xb4\xc4\x4f\xe2\xd9\x46\xab\x1b\xcc\xd9\x88\xe0\xb9\x47\x1e\x84\xc3\x92\x95\x00\xaf\xc1\x6f\x13\x2f\x96\x73\x5a\x96\x24\xa6\x2d\x68\x0c\xbc\x7b\xfc\x9f\x8a\x10\xb6\x38\x9b\x55\x52\x1b\x93\x24\x69\xb4\x6d\x44\xf1\x64\x54\x96\x2f\xf1\x3c\x56\x13\x05\x42\x66\x69\xae\xbe\x4c\xe4\xdc\x28\xb1\xf1\xac\xc8\x54\xba\x88\xb5\x33\xa3\xcf\x48\xca\xa1\x2f\x5f\xe8\x79\xd8\x98\xd0\x53\x63\xd4\xf3\x3e\x9b\x98\x85\x28\x7f\x7d\xe7\x20\xf7\x41\xc7\x3d\xd1\xe3\xf3\xc6\xff\x8a\xa1\x99\xf2\x2b\x9a\xeb\x86\x30\x75\x18\x28\x28\x48\x63\xaa\xa9\xd5\xd0\x96\xe0\x85\x5c\xfa\x70\xf0\x92\xd7\x7a\x4a\xac\xab\x27\x21\x63\xdd\x0b\x62\x4e\xac\x33\xed\x12\x78\x2e\x1c\xf7\xcc\xb9\xb0\x2b\x86\xb4\x4c\x46\x88\x4f\xe0\x2e\x4f\x4c\x5d\x91\x33\xa5\x94\x4e\x19\x55\x3a\xf5\xde\xaf\x8c\xd7\xd0\x69\x86\x0e\x9f\x57\x72\x3c\x86\xe4\x92\x80\xaa\x55\xe6\x12\xe7\x7a\x92\x0b\xbe\xa9\x0e\xff\x15\x6b\x88\x43\x7e\x04\xf5\x2e\xd3\x54\xae\x89\x68\xee\x55\xb7\x9c\xf4\x93\x18\xda\xbf\x46\x18\x1c\xfa\xdb\x60\xa7\x58\x6c\xa3\x96\x47\xbd\xc6\x2a\x9e\x8f\x23\x99\x8e\x1b\x7e\x2e\x88\x27\xe0\x18\x84\x34\x28\x39\x62\x77\x10\x66\xa9\xa2\x78\x82\x8c\x52\x02\x44\x20\xa0\x49\xcb\x85\x1a\x01\xa3\xff\x14\xc4\x4c\xb0\xef\x9b\x64\x8e\xc6\xbc\x73\xd1\xc3\xbf\x7f\x62\xd3\x3a\x73\xa5\xa7\xa0\x35\x46\xde\xbe\xf5\x6d\x17\xbe\xf3\x87\x34\x75\xa8\x47\xa4\x65\xe7\x70\x40\xa8\x7d\x1f\x77\x96\xb9\x99\x35\x2d\xc2\x56\xef\x8d\x37\xdb\x43\xee\xab\x52\x1d\x70\x02\xa2\xdd\x90\xe7\x31\x9d\xbc\x4b\x96\x75\x67\x65\xc9\x01\x57\x15\xb4\xda\x94\x8a\xf1\x49\xd3\xa5\x01\xdf\x70\x37\x64\x97\x0a\x40\x84\xcf\x40\x83\x1c\x23\x53\x5a\xec\x95\xbd\x20\x51\xf3\x59\x10\xfe\x6e\x38\xbf\xed\xd8\xdd\xd0\xd8\xec\x91\x1d\xb2\xa4\x9a\x60\xa9\xba\x69\x15\x62\x4a\x5a\x22\x58\x5b\xb1\xb2\x6c\x0f\xa3\x15\xa8\xb7\x13\xe0\xa5\xca\xb3\xa5\x1c\xe0\xa2\x8d\x0c\x5e\x0e\x0c\x85\xfd\x18\xea\xcc\xa4\xf9\xb8\xd2\x3f\x63\xcb\x53\x69\xb6\x6e\x72\x74\x5a\x5e\x70\x90\x7c\x86\x05\xc5\x02\x2e\x3f\xe6\xa0\x2d\x97\x02\xfc\x51\x9b\xc3\xc8\x33\x0f\xd8\xe4\xb0\x94\xd9\xa5\x8e\xa8\x7c\xf1\x2a\x5c\xe5\x57\x76\x64\x4b\xbb\x59\x74\x8a\x2d\x9c\x7e\x7d\x17\x90\x9e\xf7\x3e\x36\x95\x68\x2f\x21\x70\x94\x00\x52\xa4\x48\xf0\xa9\x16\x76\x60\x67\x1e\xb0\xaf\xb0\xb5\x8c\xd5\xe7\x8f\x93\x66\x36\x8b\x4d\xa1\xb5\x25\xfe\x8c\x58\xb6\x28\x47\xf8\xc3\xd8\xb2\xfa\x36\x3f\x21\x1d\x6c\x7c\x34\x28\xc2\x76\xa1\xe1\x28\x7b\x68\xbe\x63\x69\xde\x3a\xf8\xe1\x07\x0e\xea\x90\x27\x8e\xea\x3e\x0c\x21\x81\xcb\xfb\xa7\xee\xcc\x5a\x2d\x82\x19\xa2\xa4\xd5\x76\x1c\x4a\x4c\x76\x6f\x6a\xb6\xfa\x59\xde\x93\xd2\xb2\x33\x4a\x29\x7e\x4a\xf1\x0d\x19\xd5\xc4\xc5\xe6\xaf\x58\x62\x66\x86\x4d\xe1\xa0\x38\x12\x11\x9b\x66\xb1\xff\xd6\x51\x29\xaa\x2c\xcb\x08\xf0\xe6\xc9\x23\x94\x8f\x0a\x99\x96\xf6\xb4\xc4\x69\x69\xb7\x05\x76\x62\x83\x92\x80\xe6\x61\x35\x18\x14\x10\x4c\x1d\x14\x60\xc8\x59\x8a\x1d\x6e\xa6\xa4\x87\x32\x19\x2a\x05\x89\xc3\x04\x4a\xea\x99\x7c\x8a\x21\x99\x4b\x5e\x93\x2c\x14\xa0\xe9\xa9\xc8\xb5\xfa\x8c\x34\x96\xc1\x8e\x99\x5c\xa2\x1e\x34\x94\xdd\x90\x11\xad\x38\xbf\x9e\x6b\xf3\x11\xc0\x55\x82\x44\x9d\xe4\x09\x20\x50\x0e\xb2\x95\x95\x06\x2c\xb0\xb1\x32\xa8\x45\xc7\x20\xab\x52\x62\x8a\x8a\x26\x7f\x84\x58\x93\x2b\xf1\xfd\x07\x2e\xca\xbf\x7f\xff\xc7\xd6\x8e\x14\x49\xcc\xfa\xae\x48\x5d\x5c\xe4\x54\x6b\x91\x56\x62\x90\xf6\x46\xcd\x2a\x0b\x39\x77\x63\x8e\x1b\xda\x94\xf5\x64\xff\xdb\xfd\xac\xc8\x71\x72\xe5\x12\x81\x57\x53\x42\x73\x9b\x9f\xda\x62\x57\xbc\xaa\x04\x44\xd6\xd2\x3c\x3f\x25\x65\xe9\x3a\xd8\x14\x0b\x6b\x30\xad\x83\xa0\xcc\xd7\x56\xfc\x30\x94\x3c\xea\xe0\x24\x13\xc9\xac\xc9\x0a\x5a\xbd\xad\x5d\x08\xa5\xaf\xcc\xa2\x59\x58\x6e\xf8\xbe\xb2\x64\xdb\x43\xb0\x60\x6d\xf2\x09\xa8\x53\x3f\x20\xb4\xc5\x99\x4f\x10\x7b\x74\xa2\xb8\xf3\x29\xce\x32\xe5\xdd\xfe\x33\xc3\x19\x31\x77\x1b\xf6\x26\x08\xa0\x3d\x0b\x5e\xea\xf5\xc0\x96\x72\x35\x97\xef\x71\x76\x61\x64\x60\x44\x15\x38\x17\x2e\x30\xaa\x91\x68\xab\x81\x29\xd5\x18\xb5\xc5\xee\xdf\x4e\x3d\x3d\x42\x49\x6f\xe5\x04\x0b\xdc\xc3\xf8\xed\x41\xb2\x06\x87\x91\xb3\x83\x1d\x0e\x51\x1f\x06\x39\x57\xf2\x89\x1c\xf9\x60\x4b\xd5\x13\x80\x64\x0d\xbc\xd3\xec\x77\xe4\x0b\x20\x61\x0e\x7b\xf2\x74\x20\x59\x83\x03\xe9\x79\x32\x84\x7d\x18\x64\x34\x93\x7a\xaa\x4a\x88\x27\x00\x69\x35\xbc\xe0\xca\xfd\x20\xbd\x95\xf3\x09\xb9\xd9\xd1\xf2\x44\x2b\xa7\x21\xde\xb2\xb0\x3d\x38\x8f\x58\x39\x1e\xc6\x13\xad\x9c\x86\x28\x40\x7a\x21\xf7\x80\x1f\xb1\x72\x08\x64\x11\xf2\xd3\xac\x1c\x06\xc9\x27\xba\xaf\xf1\x24\xf3\xfa\xa4\x20\x59\x03\x83\xc4\xe6\x23\x44\xcd\x93\x18\x6b\x1f\x4b\xca\xd7\x10\xd2\xdb\x37\x9b\xb6\xd7\x41\xf5\x6c\x78\x46\x08\x99\x7e\x40\x1c\xd5\xa3\xde\x56\x78\x58\x60\x91\xd0\x9b\xe2\x80\xc0\xaa\x40\x29\xf6\x55\x12\xd9\x0b\xf6\x30\xa6\xe0\x57\xd8\x1c\x60\x0a\x57\xca\x81\xcf\x7b\x7b\xbf\x3e\xc6\xa0\x10\x39\xf3\xd2\x11\xea\x35\xc8\xe9\x14\xe6\x8e\xc7\x51\xfd\x44\x17\xae\xa6\x03\xd2\xda\x5e\xa4\xa6\x4a\xab\x94\x5a\x5a\xbb\x84\x15\xfb\xc5\xcb\x76\x6d\xf1\xa8\x00\xc9\x07\x15\x6f\xdc\xe9\x3b\x18\x5e\xac\x39\x9a\xce\x12\x03\x50\xdc\xd9\xdc\x21\x7e\xcf\xa4\xbd\xba\xb6\xe7\x87\xd1\xe1\x05\xf9\x15\xd1\x09\xe4\x86\x79\xe3\xb5\xbc\x0a\xf6\xeb\xe3\x79\x75\x82\xb2\xbc\x6a\x14\x74\xeb\x67\xa7\xa0\x27\xe1\x15\xd7\xee\xc8\xf6\xfc\x66\xbb\x19\x47\x3d\x28\xef\xf8\xd7\x0b\x66\xe0\x78\x24\x84\xeb\x85\xd9\x0e\x9c\x3b\xe5\xee\xee\xc2\x15\xdd\xa5\x50\x08\x79\x85\x84\xf0\xc9\xbe\x83\x2a\x39\x4b\xa8\xdd\xdc\x31\xf3\x38\x52\xdc\x18\xa5\xc2\x3e\x5f\x50\xc7\xc5\xf6\xf1\x18\x77\x39\x86\x22\x1b\x38\x96\x39\xf5\xfc\x49\xc4\x9b\xa0\xc3\x51\x3b\xb2\xb7\xb6\xeb\x7f\x9e\xf1\xca\x03\xc0\xf6\x6d\x04\x8e\x00\xb6\x67\x75\xe6\x36\x53\xfc\x73\x06\x68\x38\xb6\x94\xd7\x1b\x8f\x2a\x92\x39\x16\xca\x12\x05\x6c\x4c\xd7\x32\x5e\x2b\x61\x1c\x8f\xb9\x97\x16\x25\xd4\x12\xcf\xd4\x99\xdf\xb3\x2b\x0d\xb1\x2d\x80\xed\xee\xcc\x6f\x30\x65\xfb\x12\xe7\x18\x53\xa8\xa9\xe4\xdf\xd2\xf0\xdc\xa0\xe1\x51\x83\x7f\x70\x83\xb1\xc9\x98\x3e\xdf\xb7\xbb\x6c\xdb\x1a\x88\xb1\x37\x85\x9d\xf2\xba\xad\xae\x9c\xdb\xca\xd0\x9d\x25\xe1\x11\x70\x7b\x6b\x78\x11\x4a\xef\x38\x28\xfe\x9d\xa2\x7f\xb4\x2b\xff\x04\x8f\xc1\x83\xa5\x24\xda\xfa\x44\xa0\x86\x44\x62\xfb\xf7\xc4\x95\xc1\xcd\xa7\xbf\x0f\xee\x05\xb5\xdd\x53\x9c\xb8\x57\x9a\xaf\x49\x1e\xd7\xe5\x55\xde\x84\xae\xcc\xd6\x62\x25\x11\x8a\x5d\x97\x5c\xcd\x58\x8f\x63\x9c\x7f\xed\x0d\x23\x66\xd8\x7c\xeb\xa0\x3f\xc9\x79\xae\xec\x4a\xaf\xb6\xb8\x56\x98\x06\xcc\xc2\x25\x81\xca\x8e\x7a\x23\xac\x1f\xa6\x91\xca\x43\x61\xc7\x09\xf3\x74\x3e\xb7\xf7\x40\xdc\x2b\x71\xc6\x9a\x59\x92\xcf\xc7\x02\xe5\xdf\x9a\x7a\xaf\xb0\xcf\x5d\x55\xd2\x58\xa4\x6a\xf2\xca\x76\x1e\x82\xd2\xdb\x17\xcc\x6a\x4b\x38\x66\x33\xdc\xfa\xdc\x3b\xd9\x1c\xb1\x13\x1c\xa2\xd2\x91\xda\x0f\x50\xa9\xbc\xf6\xf6\x78\xb4\x37\x14\x1d\x7b\xa1\x5c\x8b\x88\x65\x1b\xf7\x1f\xc0\xb6\x95\x5c\x33\xbf\x8a\x7b\xd3\xc4\xdd\x42\x6f\x93\xc7\x6f\x61\xb9\xbe\xd5\xc5\x45\xeb\xc5\xf8\x1e\xe1\x96\x63\xbc\xb2\x09\xf7\x23\x26\xe8\xce\xba\xc7\xc6\xe9\xa8\x45\x1b\xe6\x22\xfe\xba\x76\x11\xb3\x45\xed\xba\x49\xc7\x25\xa0\xca\x88\xe2\xaf\xb2\x48\xda\x53\xfe\xec\x00\x73\x40\x95\xdb\x82\xf6\x2a\xf2\xc5\xec\xda\x08\x89\x12\x5a\xd9\x0b\xf3\x68\xa6\xa2\x5f\xed\x45\x01\xbe\x44\xda\xa1\x5b\x47\x9d\x4b\xfa\xcf\x13\x6e\x1d\x56\x5f\x82\x4f\xd4\xff\x04\x81\xa6\xd8\xaf\xf0\xf5\xde\x22\xcd\x43\x10\x6e\x51\xbe\xb0\x1d\xe1\x76\xec\xe6\x67\xdb\xbd\xf5\x65\xd3\xe8\x22\x19\xe7\x73\x2c\xf2\xcf\xcb\x24\xcd\x4c\x8d\x13\xbd\xff\x07\x00\x00\xff\xff\xb2\x94\xbe\x7b\x0f\x23\x00\x00")

func fsmJsBytes() ([]byte, error) {
	return bindataRead(
		_fsmJs,
		"fsm.js",
	)
}

func fsmJs() (*asset, error) {
	bytes, err := fsmJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fsm.js", size: 8975, mode: os.FileMode(420), modTime: time.Unix(1473415754, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fsm.js": fsmJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fsm.js": &bintree{fsmJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

