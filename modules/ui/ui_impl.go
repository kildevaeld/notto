// Code generated by go-bindata.
// sources:
// ui.js
// DO NOT EDIT!

package ui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xcb\x6e\x83\x30\x10\xbc\xf3\x15\x2e\x17\x40\x42\x7c\x40\x50\xae\x3d\x57\xea\xb1\xaa\x22\x8b\x98\x60\x15\x6c\x6b\x6d\x27\x8d\x2a\xfe\xbd\x6b\xf3\xb4\xd3\x5e\xaa\xfa\x92\x68\x77\x66\x76\x18\x2f\x24\x57\x0a\xe4\x74\x52\xc0\xaf\xd4\xb0\x93\xe5\xe4\x48\x06\x79\xb6\x3d\xab\xf6\xd5\x3a\xf1\x40\xdf\xfe\x4a\x08\x9e\x17\x90\x0d\xd3\xfa\x10\x90\x2b\x35\x55\x4b\x0f\xe1\x42\x59\x73\x20\xad\x15\x8d\xe1\x52\x90\x7c\xd0\x97\x62\xa6\xbb\x03\xcc\x58\x10\xa1\x40\x2b\x61\xc8\x37\x88\x3b\xe6\xae\xd8\x81\x64\x5e\x2d\x2b\x83\xd6\x80\xb3\xe8\x05\xbb\xa8\xbc\x36\xc6\xa2\xf6\xff\xc7\x32\xf1\xbf\x8a\x6a\x7d\x93\x70\xfe\x37\x27\x8b\xe0\x5f\xcc\x34\x1d\xe5\x62\xef\x44\x2a\xa3\xf7\x56\x5c\xcc\xd2\x1a\x97\xf3\x58\xaf\x55\x34\x43\x72\xd7\xfa\x60\x77\xcc\x95\xc4\xac\x85\x79\xa5\x3d\x32\x5d\xf7\x0d\x91\xef\x75\x00\xe0\x2d\xc9\xdd\x23\xc8\x76\xc2\x1d\x8f\x24\xd3\x06\xb8\xb8\x64\xb1\xd6\xa4\xd7\xaf\xb7\x1d\x9f\x29\x09\x44\x94\x3f\xb6\xd7\x28\xd0\xc4\x03\x60\x0c\x2a\x23\x61\xbd\x66\xde\xdb\x13\xea\x55\x33\xf5\x17\x43\x4b\x1b\x8d\xc5\xd2\xa1\x2c\x46\xe8\x13\x40\xe0\xe3\xad\xa2\x50\xb1\x45\x33\xc6\x6b\x80\xdc\x68\x83\x96\x5d\x0f\x16\xa8\x74\xf5\x81\x6b\x16\x5f\x9f\x8a\x87\xce\x7c\xbf\x75\xdb\x5c\x55\xbd\x1a\x0a\x26\x2f\xe2\xf9\xb3\x6c\x65\x3a\x26\xf2\x6d\x24\xc4\x99\xa0\x80\x6d\xbc\x70\x7a\x96\x82\xa5\x45\x78\xdd\xb3\x1a\xec\x9e\xb4\xa8\x1a\x6a\x9a\x6e\x27\xfa\x10\xb4\xaa\x9e\x29\xef\x2d\xb0\x3c\x65\x00\x12\xd2\x22\x7c\x05\x3a\x90\x37\xc2\xf6\x9a\x53\x54\xc9\x98\x24\xf3\x87\x83\x7d\x2a\x09\x46\x63\x0a\xf8\xe1\xf8\x0e\x00\x00\xff\xff\x1f\xcc\x67\x7d\x61\x04\x00\x00")

func uiJsBytes() ([]byte, error) {
	return bindataRead(
		_uiJs,
		"ui.js",
	)
}

func uiJs() (*asset, error) {
	bytes, err := uiJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui.js", size: 1121, mode: os.FileMode(420), modTime: time.Unix(1475096388, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui.js": uiJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ui.js": &bintree{uiJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

