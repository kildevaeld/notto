// Code generated by go-bindata.
// sources:
// ui.js
// DO NOT EDIT!

package ui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x94\x4f\x6e\xb3\x30\x10\xc5\xf7\x9c\xc2\x1f\x1b\x40\x42\x1c\x20\x28\xdb\xef\x02\x5d\x56\x55\x64\x91\x21\x58\x05\xdb\x1a\xdb\x49\xa3\x8a\xbb\x77\x6c\x08\x7f\x9c\x76\x53\xd5\x9b\x44\x7e\x33\xbf\x79\x3c\x1b\x92\x2b\x47\x76\x3a\x69\x14\x57\x6e\xe1\xe4\x04\x3b\xb2\x41\x9d\x5d\x0f\xd5\x76\xb7\x4e\x42\x61\x90\x3f\x13\x46\x4b\x48\xed\xec\x81\xb5\x4e\x36\x56\x28\xc9\xf2\xc1\x5c\x8a\x59\xf3\x0b\xc1\x3a\x94\x3b\x74\xd5\x2a\x1c\xf2\xb5\xc4\x2f\x7b\xd7\x70\x60\x59\xa0\x65\xe5\x4e\x1a\xc0\x18\x7e\x21\x95\xc8\x8b\x30\x16\x75\xf8\x3f\x96\x49\xf8\xd5\xdc\x98\x9b\xc2\xf3\x9f\x39\x79\x00\x7f\x63\xa6\xe9\xb8\x90\x5b\x27\x4a\x5b\xb3\xb5\xe2\x33\x54\xce\xfa\x10\xc7\x7a\xd9\x25\x33\x2c\xf7\xd2\x3b\xdc\x29\x57\x16\x77\x3d\x3a\xaf\xbc\xa7\x4e\xaf\xbe\x52\xe5\x5b\xbd\x2b\x10\x2d\xcb\xfd\x23\xa8\x76\xaa\x3b\x1e\x59\x66\x2c\x0a\x79\xc9\x62\xd6\xc4\xeb\x97\xa3\x8c\xd7\x94\x04\x55\x94\xdf\xca\x4b\x14\x64\xe2\xa9\x60\xdc\xed\x8c\x0c\x7a\x03\xc1\xdb\x3f\xe2\x55\x73\xeb\x0f\x86\x1e\x32\x19\x8b\xd1\x7b\x2c\x45\x18\x12\xa0\xc2\xe7\x53\x25\x50\xb1\x46\x33\xc6\xd7\x80\x7a\xa3\x1b\x84\xaa\xa1\xb9\xd1\x05\x2a\xfd\xfe\x20\x0c\xc4\xc7\xa7\xe3\xa1\x73\x7f\xb8\x75\xeb\x5c\x5d\xbd\x58\x8e\x36\x2f\xe2\xf9\x33\xb6\xb2\x1d\xc8\x7c\x1d\x89\x71\x26\x04\x70\x4d\x00\xa7\x67\x25\x21\x2d\xf6\xc7\x3d\xd3\x70\xf3\xa4\x45\xd5\x70\xdb\x74\x1b\xe8\x53\xd0\xba\xfa\xcf\x45\xef\x10\xf2\x14\x10\x15\xa6\xc5\xfe\x15\xe8\x50\xdd\x18\x6c\x99\x53\x54\xc9\x98\x24\xf3\x57\x01\x3e\xb4\x42\x6b\x28\x05\xfa\x2a\x7c\x05\x00\x00\xff\xff\x70\xf3\xb4\x6f\x3e\x04\x00\x00")

func uiJsBytes() ([]byte, error) {
	return bindataRead(
		_uiJs,
		"ui.js",
	)
}

func uiJs() (*asset, error) {
	bytes, err := uiJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui.js", size: 1086, mode: os.FileMode(420), modTime: time.Unix(1473122036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui.js": uiJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ui.js": &bintree{uiJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

