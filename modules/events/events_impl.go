// Code generated by go-bindata.
// sources:
// events.js
// DO NOT EDIT!

package events

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _eventsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x18\xcb\x6e\xdb\x38\xf0\xee\xaf\x60\x7c\xa8\x25\xc4\x55\xe3\xb6\x27\xab\xc6\x1e\xba\x2d\x50\xa0\xd8\xee\xa1\x37\xc3\x08\x64\x89\xb2\xd9\x2a\x94\x21\x51\x69\x82\xc4\xff\xbe\x33\xa4\x28\x91\x14\xe5\xb8\xd9\x94\x87\x44\x1c\xce\xfb\xc5\xa1\x27\xd3\xa6\xa6\xa4\x16\x15\x4b\xc5\x34\x9e\xdc\x26\x15\x61\xd9\xc7\xb2\xe1\x82\x56\x64\x45\xae\xe2\x49\xde\xf0\x54\xb0\x92\x93\x1d\x15\x5f\xfe\x0e\x42\xf2\x30\x21\xb0\x2a\x2a\x9a\x8a\x93\xe9\x94\x5c\x92\xe0\xf2\xb2\x23\x0a\xe3\xc9\xb1\xa7\x49\x93\xa2\xf8\x0c\x9b\x20\xe7\x73\x92\x54\xbb\x5a\x93\xb3\x9c\x04\xb8\x27\xab\xd5\x8a\xdc\x96\x2c\x23\x57\x70\x44\x14\x88\xac\x37\x31\x39\x4a\x3c\x54\xa8\x00\x48\xce\xa3\x82\xf2\x9d\xd8\xcf\x09\x83\xed\xeb\x05\xb0\x5b\xc0\x07\x12\xac\xaf\x36\xb0\x7b\xab\x77\x0b\xdc\xbd\xd3\xbb\xb7\xb8\x7b\xaf\x77\xef\x36\xb1\x64\x5b\xff\x62\x22\xdd\x2b\x15\x5a\xc6\x5a\x33\x5c\x69\x02\x4e\xb9\x5a\x76\x7b\x5c\xbf\xf6\xac\xa0\xd2\x54\xf2\x81\x14\xa1\x75\x86\x2b\xe7\x6b\xb6\x89\xf6\x09\xcf\x0a\x5a\x45\x68\x78\xa0\x40\xa9\xb8\x0b\x63\x0b\x5d\xf9\x2e\xb6\xc5\x2d\x5e\x4e\x1c\xfa\xe6\x1c\x91\x6f\x5f\x56\x24\x06\xe1\x1c\xb1\xef\x5e\x5e\x2c\x46\xfc\x1c\xd1\xef\xff\x8c\x68\x4c\xb1\x27\xc4\x67\x34\x4f\x9a\x42\xfc\x1f\xf9\xc9\xe1\x50\xdc\x5b\x0a\x60\x41\x8d\x8b\x3d\x42\x25\xd2\xbb\x43\x59\x89\x3a\xd2\x85\x08\x85\xa0\x3f\x8d\xd2\x66\xf5\xe7\xf6\x33\x48\x9c\x02\x17\xf7\x07\x5a\xe6\x24\x91\x85\x3a\xd3\x14\xb3\xd8\xe0\xdd\x53\x03\xf7\x7e\x63\xf1\xff\x74\x4b\xb9\xf8\x74\xc3\x04\xb4\x88\x81\x8c\x84\x30\x5e\x8b\x84\xa7\x28\xc9\xc4\x24\x8f\x8f\x24\x30\x95\x8b\x4a\x1e\x92\x57\xaf\x88\x0d\xcb\xf3\x21\x10\x3a\xda\x6e\x07\xed\x28\xb4\x35\xb5\xb8\xaf\x1c\xc5\x54\xff\x73\x50\x82\xce\x8a\xae\xf7\x75\x10\xcb\x2a\x7d\xaa\x1a\xd7\xb7\xed\x0f\x9a\x8a\x08\xc2\xce\x38\xfd\xb7\x2a\x0f\xb4\x12\xf7\x81\x49\x10\x1d\xaa\x52\x94\xe8\xdf\x39\x99\x16\xac\x16\x94\xd3\xaa\x9e\xce\x8d\x3e\x04\x2d\x77\x49\x86\xf2\xed\x60\x13\xb1\x67\x75\x74\xdd\x71\xe8\x13\xe2\x38\xef\x3e\x29\x6f\x6e\x68\x95\x6c\x0b\xba\x24\xa2\x6a\x68\x7f\x92\x96\x3c\x67\xbb\xc6\x38\x53\x56\xb4\x89\xe5\xd7\x38\x92\xb1\xee\x35\xa3\x88\x35\x27\xd8\xe5\x65\x66\x96\x10\x4b\x53\x5b\x6c\xf7\x08\x73\xda\xbd\x02\x91\x3c\x29\x6a\xaa\x3b\x3e\x2e\x0c\x83\x64\x89\x97\x41\xe0\xd8\x27\x93\xc2\x85\xad\xc8\xc3\x31\x0c\xd7\x92\x68\xe3\xc3\xd0\x47\x78\xb9\x18\x35\xa3\xa4\x44\x87\xa6\xde\x07\xb6\x73\x79\x72\x03\xfe\x50\x86\x59\x07\xa8\xf4\x52\xfe\xb5\xe1\x6d\x99\x2e\xd1\x0b\xd6\x01\x78\x64\x89\x7f\x50\x2d\xd4\xaa\x8f\x8f\xa1\x88\x11\xcb\xb6\x7a\x9f\xf0\xbf\xf2\xdc\x48\x04\x4c\xdf\x9b\x59\x02\xa5\xe1\x86\x0a\x23\x1e\x9e\x25\x32\xcf\x87\x12\xff\x01\x2f\x21\x33\x53\xe0\x30\x36\x9e\x08\x3e\x1c\x63\x2b\x3b\x3a\x6e\x90\x22\x84\x37\x45\xe1\x26\xbb\x2f\xe2\x46\xaa\xf7\x11\x85\x5c\x92\x1c\xbd\x09\x80\x12\x36\x2e\x6b\x2b\xdd\xc6\xc9\xec\x4e\x8b\x22\x72\x3e\xa6\xad\x47\x63\x83\x93\x1a\x71\x2c\x82\xa3\xb5\x93\x46\x0c\x39\xe6\x65\x45\x02\x39\xa3\xc9\xd9\x8c\xe0\xb5\xd1\x66\xb0\x1a\x62\x00\x74\x79\xe9\xd3\xc5\x32\xf3\x1a\x27\x27\x45\x07\x77\x49\xec\x45\xee\x62\x52\x1b\x57\x10\x5a\x6b\xc7\xfa\x7c\x9b\xa3\xfa\x50\xb0\x94\x06\x6c\x4e\xdc\xe1\xc4\xef\x83\x21\xe4\xe8\x84\xfb\x74\xbe\xb6\x37\x80\x3f\x67\x4d\x1b\xd0\x2f\xfd\xe0\x39\x19\x38\xfb\x1a\xbd\xbd\x88\xf1\xff\x07\x44\x84\x4e\x6a\x7a\xfc\xda\xe3\x72\x39\x6c\x02\xfe\x6b\xb2\xd8\xa8\xd9\x53\x11\x01\x6c\xe3\x4b\xda\x37\x6f\x0a\x2a\xc6\x5b\xde\x53\x1d\x4f\x3a\xf8\xf1\xf1\x44\xca\xaf\xa0\xeb\x19\xd2\x22\xe8\xfa\x69\x22\x06\x04\x33\x98\x0d\x66\xc0\xc9\xc4\xfe\xed\x72\x3e\xd9\xbd\xcd\x2a\x00\x3a\x10\x74\x5a\x97\x16\xc9\x6e\x16\x56\xc4\x33\xba\x6d\x76\x1f\x01\x79\x9b\xa4\x3f\xed\x19\x6a\x1c\x4f\x49\x03\xc9\xf0\xf4\x69\x52\x51\x56\x11\x97\x9d\x4c\x82\xd5\xa7\xd1\xdf\x30\x9c\x2d\xc0\x1c\xb8\x3a\x43\x01\x63\x4e\x20\x1f\xba\xb2\xea\x1f\x2b\x3c\xa3\x77\x36\x05\xce\x5f\xa3\xb9\x26\x0b\x1b\xc8\x98\xcb\x4a\x15\x3b\x63\xde\x0a\x97\x98\xe3\x35\x9d\xb4\xcf\x9f\x61\x03\x93\x04\xd2\x5e\x2c\x6d\xe9\x71\x5f\x75\x23\x03\xb3\x94\xdb\x88\x79\xe6\x4f\x5c\xdd\xa3\xaf\xbd\x73\xc1\x3b\xe1\x33\x9a\x9d\xf4\x93\xba\x99\x25\x9f\x93\x3c\x7a\x63\xba\x31\x43\x5e\x6c\x1e\xbe\x32\x24\x63\x8d\x5e\xfa\x62\x13\x49\x9c\x6f\xb9\x57\x30\xae\x53\xb4\xba\xcf\x21\x8b\x61\xaf\x73\x7b\x98\x56\x5e\x59\xdb\x3e\x45\x3d\x17\x1f\xbd\xa3\x69\x23\xe8\xd7\x56\xa4\xc2\x1f\x3c\x01\x7e\x73\x8a\x70\xb9\x5a\xbd\x12\xbf\xec\x47\x3b\x2e\x99\xf3\x92\xaa\xac\xac\xc7\x84\x69\xcc\xa0\xb8\x1c\x39\x7a\x4e\x1f\xe4\x71\xcf\xf8\x5c\x16\xde\x11\xa0\x65\x63\x9a\x70\x8e\x3b\x54\x3c\xbf\x97\x96\x1b\xca\xed\x8f\x39\xf9\x03\xf3\xad\x12\xc6\xf8\xee\x7b\x09\xf5\x9e\xcd\xc9\x0d\x85\x2a\xef\x50\x8c\x63\x27\x57\x15\xcc\xbd\x12\x34\xe6\x83\x39\x54\x82\x1e\x2b\x02\x06\xb4\x96\x7d\xc9\x24\x99\x05\x58\xe9\xdf\x75\x42\xaf\xec\x35\xcb\x36\x8a\x47\x7f\x8c\x8a\x22\x0c\x8d\xfb\x8b\xcc\xf0\xff\x8c\x2c\xf1\x63\xd6\x23\x01\xc5\x1a\x11\x37\xe6\xc0\x89\x0a\x3f\x3f\x5b\x75\x78\xbe\xb9\xb3\xaf\x27\x44\x63\x03\xb0\xe6\xe1\x0f\xeb\xd9\xb3\x70\x2d\xca\xc3\x57\xed\xa5\x51\x5d\x52\x7d\x29\x39\xf5\xf3\x44\x6c\xed\x5a\xba\x30\x4e\xc2\xb1\xe7\x9f\x7d\xc3\x54\xf4\xa6\xbc\x45\x17\x5d\xa8\x8b\x01\xde\xc6\x17\x5a\x17\x87\xb9\x06\x23\x4e\xfb\xd4\x6f\x2f\x13\xbc\x0f\x4a\xf9\x88\x9d\xd9\x62\x3b\x92\x95\x23\x5a\x16\xc1\xf6\x87\x8d\x1d\x0c\xd2\x73\x6d\xe6\xdf\x20\xb9\xfa\x9b\x30\x83\x4e\x6d\xba\xca\x6d\x16\x40\x06\xc4\x4e\xae\xc6\x2e\x0a\x3e\x5b\x02\x27\x1e\x83\x44\xd4\xda\xb7\x8e\x83\x22\xb9\x68\xdf\xef\x3f\xe9\x7d\x6d\x14\x0c\xf4\xfa\xd0\xdb\xa4\x71\x65\x14\x86\x38\x3a\x8c\xa7\xad\xd7\xf1\xb9\xe9\x9f\x51\xe8\x85\xe5\xbd\x95\x6d\x83\x67\x97\x95\x98\x81\x61\xa2\x7a\xfe\x81\x2f\xec\xfc\x6e\x75\xb0\x7f\x05\x39\xca\x6e\xa0\x7f\x34\x71\x7e\x0f\xb1\x51\xff\x0b\x00\x00\xff\xff\x95\x1a\xc8\xff\x40\x16\x00\x00")

func eventsJsBytes() ([]byte, error) {
	return bindataRead(
		_eventsJs,
		"events.js",
	)
}

func eventsJs() (*asset, error) {
	bytes, err := eventsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "events.js", size: 5696, mode: os.FileMode(420), modTime: time.Unix(1473450682, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"events.js": eventsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"events.js": &bintree{eventsJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

