// Code generated by go-bindata.
// sources:
// crypto.js
// DO NOT EDIT!

package crypto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cryptoJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xd1\x6a\x33\x21\x10\x85\xef\x7d\x0a\xef\xe2\x42\x30\x0f\x10\xfe\x8b\xbf\x4f\xd0\xfb\x52\x82\x98\x49\x62\x51\x47\xc6\x31\xed\x52\xf2\xee\x75\xed\xee\x26\x5b\x68\x28\x91\x85\x05\x3d\x73\xbe\x33\x47\x88\x43\x89\x96\x1d\x46\xc9\xf8\x4c\x18\x5c\x06\xd5\xc9\x4f\x21\xeb\x39\x1b\x92\x86\x8e\x59\xfe\x93\xff\x89\x4c\xaf\x13\x21\x23\xf7\x09\x74\xf6\xce\x82\xb6\xc6\x7b\x55\x15\x25\x40\xe4\xdc\x6d\xdb\x14\x01\x17\x8a\x32\xc2\xbb\x9c\x0c\x67\x86\x22\xc8\xe8\xcf\xb0\xae\xaa\x37\xb0\x3c\x91\x26\x5a\xa8\xa8\x81\xa8\xf3\xc9\x1d\x58\x75\xf3\x63\xbb\x4c\x25\x9f\x6e\xbc\x80\x68\xf0\xc9\xc5\x2f\x7c\x86\xb3\xd9\xb8\x43\x13\x74\x53\x9c\x6f\x5e\xbb\x5a\x28\xe7\xe7\x96\x4b\x8d\x76\xdb\x59\x73\xb9\xca\x03\xee\x8b\x07\xbd\xdb\x25\x72\x67\xc3\xb0\xb3\xd4\x27\xc6\x97\xf0\xaa\x4d\x4a\xbe\x57\x61\xdd\x72\x8e\xd3\x75\xf2\x22\x84\x80\x8f\x84\xc4\x59\x93\x89\x7b\x0c\x4f\x3d\xc3\xd0\xe7\x75\x0b\x0f\xf1\xc8\xa7\x69\x81\x47\xcb\xfb\x25\xdb\x2d\x75\x24\xad\xe5\x9f\x1a\xbc\xd3\xdf\xf6\x47\x81\xf7\x9b\x1b\x7f\x8f\x05\xbc\x4d\x65\x31\x56\x12\x68\x8f\x47\xb5\xa2\x64\xc8\xa4\xfa\xad\x16\x14\x71\x91\x5f\x01\x00\x00\xff\xff\xcc\x96\xb2\x20\xd2\x02\x00\x00")

func cryptoJsBytes() ([]byte, error) {
	return bindataRead(
		_cryptoJs,
		"crypto.js",
	)
}

func cryptoJs() (*asset, error) {
	bytes, err := cryptoJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "crypto.js", size: 722, mode: os.FileMode(420), modTime: time.Unix(1473506683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"crypto.js": cryptoJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"crypto.js": &bintree{cryptoJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

