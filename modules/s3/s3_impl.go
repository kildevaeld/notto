// Code generated by go-bindata.
// sources:
// s3.js
// DO NOT EDIT!

package s3

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _s3Js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x90\x3f\x4f\xc3\x40\x0c\xc5\xf7\xfb\x14\x9e\xda\xb4\xaa\xd2\xa2\x8e\x51\x58\x59\x18\x90\x18\x11\x8a\x4a\xe4\xb4\x07\x21\x77\xb2\x9d\xd0\x0a\xe5\xbb\x73\x7f\xd2\x90\x56\x88\x05\x6e\xb2\xfc\x7c\x3f\x3f\x3f\xa5\x54\xd5\x36\xa5\x68\xd3\xc0\xe3\x16\x12\x63\x7d\xc9\x0b\xf8\x54\xe0\x9e\x1c\x34\xa7\x45\x59\x6b\x6c\x04\x72\x28\x0a\x4b\xba\xdb\x09\x16\xbc\x1d\x47\x33\xd5\x2b\x85\x47\x6b\x48\x38\x75\x8c\xdc\x81\x32\xa5\xba\x1d\x81\x25\x23\x26\x34\xd2\x50\xca\xc9\xa2\x93\x42\x9d\xee\xd1\x23\xc7\xed\x09\x9b\x96\x4a\x5c\x81\xec\xc8\x49\x67\x07\x1e\xc3\x58\x57\x6e\xd4\x9b\xc9\x42\x93\x50\x5a\x6a\xa0\xc1\x0f\x78\x20\xf3\xae\x19\x93\x6f\x0e\x21\x9b\xba\x73\x20\xc2\x57\x2c\x47\x90\x7f\x1e\x74\x3e\x27\xbd\x43\xb9\xda\xb9\x9a\xb8\x41\xa2\xe9\x4f\xff\x74\x35\xb4\x87\xf5\x91\x1f\x5a\xd9\xc5\xe0\xa8\x07\x23\xc9\x44\xed\x87\xba\x8f\xa9\xc5\x20\x6a\xcd\x97\x49\x58\xc2\x4a\x1f\x7f\x4d\x60\xbd\xf4\x6e\xe2\x60\x5a\x63\xb3\x97\x03\xdc\xc2\x06\x66\x33\x88\xcd\xa7\xcd\x33\xe4\x79\x0e\xf3\xf5\x7c\x7a\x47\x14\x1d\x6a\xf8\xca\xed\x0b\x0b\x25\x37\x8b\x68\x6b\xb9\x56\xff\x17\xf0\xbd\xbb\x6b\xb0\x78\x95\xec\x0a\xde\xf0\xc4\x7f\xc8\x37\x06\x1b\x20\x3f\x85\xab\xfa\xaf\x00\x00\x00\xff\xff\x21\xa1\xc3\x8d\xd8\x02\x00\x00")

func s3JsBytes() ([]byte, error) {
	return bindataRead(
		_s3Js,
		"s3.js",
	)
}

func s3Js() (*asset, error) {
	bytes, err := s3JsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "s3.js", size: 728, mode: os.FileMode(420), modTime: time.Unix(1473089927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"s3.js": s3Js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"s3.js": &bintree{s3Js, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

