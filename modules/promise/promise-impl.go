// Code generated by go-bindata.
// sources:
// dist-promise/bundle.js
// dist-promise/promise.js
// DO NOT EDIT!

package promise

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bundleJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x4b\x6f\xdb\x46\x10\xbe\xf3\x57\x8c\x2f\x11\x69\x0b\xf2\xf3\x64\xc1\x40\x8b\xa2\x87\xde\x7a\xc8\x2d\x08\x04\x6a\xb5\xb4\x58\xd3\x4b\x62\x49\xca\x35\x1a\xfd\xf7\xce\xec\x73\x96\x96\x1c\x1b\x49\x0a\x14\x88\x81\xd6\xde\xd9\x79\x7e\xf3\x5a\x66\x36\xf6\x12\xfa\x41\xd7\x62\x98\x2d\xb3\xec\xfc\xf4\x34\x83\x53\xf8\x45\xb4\x0a\x89\xa3\x18\x5a\x8d\xe7\xf3\xac\x1a\x95\x18\xea\x56\xc1\x9f\xba\x7d\xac\x7b\x99\x6b\xd9\xb7\xcd\x4e\xea\x02\xfe\xc9\x00\xea\x0a\xf2\xe1\xb9\x93\x6d\x05\xfe\x02\x4e\xee\xee\x60\xe6\xe5\x66\xf0\xe1\x03\x1c\xe4\x18\xd5\x46\x56\xb5\x92\x9b\x99\x55\x05\x30\x6c\x75\xfb\x04\x4a\x3e\xc1\x47\x14\xf8\x5d\xeb\x56\xe7\xc5\x12\xaf\xf6\x59\x6a\x6a\xd8\xd6\xbd\x55\xd2\xae\xff\x92\x18\x00\x7c\xf9\x82\x97\x44\x25\x6b\xf8\x7b\x31\x6c\xa5\x2a\xde\xa6\x78\x57\x6a\xe8\x65\x53\xc1\x9d\x11\x5d\x12\xed\xfc\x1c\xb1\x29\x07\xd9\xdb\xbf\x2f\x6e\xa1\x93\x6a\x53\xab\x7b\x7b\xbe\xbc\x75\xc1\x04\xca\x15\x51\xc8\x97\x40\xb9\xf6\x3c\x72\x63\x09\x37\x9e\xc5\x10\x8c\x55\x32\x81\x66\x2f\x96\x8e\xb0\x2b\x1b\x7e\x54\xf2\xef\x01\xcf\x9f\x3e\x7b\x42\xa5\xf0\xa8\xc6\xa6\xf1\x04\x04\xd3\x13\x32\xb0\x91\x77\x36\x51\x3c\x1a\x43\x77\xce\x20\x3d\xe4\xd4\x91\xf2\x9d\x07\xca\xe8\x27\x2c\x16\x95\x5a\x1a\x8a\x31\x60\x28\x52\x1b\x5d\x36\x11\x27\xc6\x75\x2f\x06\xce\xf1\xdd\xd2\x1d\x7d\x60\x97\x4e\x04\x29\x72\xf8\xe3\xf1\x51\x6e\x6a\xbc\xc8\xab\x5a\xcb\xc2\xf2\xee\x2d\x83\x96\xc3\xa8\x95\x31\x64\xf2\xc2\xdd\x26\xc8\x52\xaf\x89\xf2\xe3\x9c\xbe\xfa\x76\xa7\x57\x5d\x08\x3e\x54\x23\x0f\x81\xce\xf9\xaa\x52\x73\x58\xf9\x4e\x72\x2e\xe6\x41\x1e\xcb\xfb\xb2\x88\xce\x1e\xad\xe1\xe0\x0e\xd5\x03\xd9\x25\x1e\xdf\xad\x85\x8b\xa5\x5b\x18\x94\x56\x1e\xa1\x6e\x61\x30\x5a\x05\x7c\xfa\xa7\x7a\x10\x5b\xc8\x13\x88\x44\x89\x75\x74\x7d\xeb\x3c\xe8\x16\xa1\x5e\xca\xa6\xf0\xa8\xad\xb5\x2c\x1f\x96\x91\xfd\x86\xb3\xdb\x44\x1d\xe6\xc6\xee\x2f\xc7\x66\xf0\xec\x54\xeb\x8b\x6e\xec\xb7\x79\x77\x88\x3b\x85\xbc\x9b\xe0\x2d\x4a\x72\x9e\x01\xbc\x32\x94\x9c\xa1\xcb\x92\x65\xd2\x91\x53\xd7\x58\xfc\xa3\x32\xd3\x63\xb5\xaa\xfb\x44\x99\xa5\x98\xe1\xe3\xb5\xf9\x5a\x21\x1a\x0d\x9f\x1b\x07\xa3\x89\xe2\xb1\xec\x72\x2f\x8c\xd1\x84\x14\x3a\x21\x4c\xec\x35\xcd\xa9\x14\x4f\xd2\x72\x00\xb2\x3d\xf3\x6e\xd0\xcf\xac\x54\xa6\x43\xf5\x2e\x19\xbb\xd1\xaa\x67\xc8\xf9\x14\x98\xf3\xe6\x0a\x65\x84\xff\x81\x85\x32\x97\x71\x76\x06\xbe\x5c\xc6\xa1\xe9\xe0\xe4\x03\x53\xcb\x8a\x26\x5c\x25\xb5\x54\x42\xc2\xd0\xc2\x8c\x80\x9e\x05\x20\x2d\x9b\x58\xcf\x41\x8a\x39\x08\x75\x0b\xfd\x28\x84\xec\xfb\xdf\xca\xa6\x59\x97\xe2\x61\x0e\x55\x59\x37\xa3\x96\x91\xa0\xda\xe1\x23\x2a\x51\xe5\xba\x09\x54\xd4\x93\x74\x92\xb9\x04\xdc\x4c\xd5\x9c\x69\xe7\x6d\xe5\xc1\x32\x1d\x3f\xd9\x1b\xd3\x2b\x06\x21\x5f\x5d\xd5\x51\x80\x63\x5a\xe8\x87\x22\x54\x03\xe0\x14\x1e\xd0\x42\x0f\xe5\x7d\x59\xe3\x4a\x85\x72\x4d\x0b\x57\x60\x08\x3d\x54\xd8\x9d\xd0\x77\x52\x80\xd8\x4a\xf1\x20\x75\x90\xa6\x02\x24\x71\xb7\x04\x7c\x06\xab\x05\x09\x52\x59\xcc\x43\xe8\x71\x00\xda\x1f\x8a\x13\x45\xcf\xce\x52\xb2\x4f\xd5\x92\xd1\xf6\x19\x3b\x84\x29\xc8\x68\x62\x9d\x17\x51\x60\xff\xdf\x18\x95\x22\x31\x5a\xb8\x3f\x5f\x96\x64\x54\x20\x99\x02\x2e\xbe\xb7\x05\x0d\xb2\x41\xcc\xbd\x90\x50\x39\xaf\xf4\x8c\x97\x11\x0d\xf7\xdc\xeb\xa7\x14\x52\x5e\x28\xba\x7a\x98\x61\x0e\x4d\x99\x51\x95\x85\x41\x8b\x39\x71\xb6\x79\xfa\x4d\x99\x18\xdf\xb0\x74\xf0\x97\x99\x34\xce\xe6\x81\x30\x42\x10\xf6\xf8\x72\x01\xb9\x2e\xb3\xde\x25\x83\x30\xd4\xbd\x2d\xfb\x90\x9f\x17\xd3\x86\xed\xe0\x44\xcd\xab\x32\x57\xef\x90\x49\xcb\x9f\x0a\x22\xce\xb9\x4b\xd6\x42\xb4\x80\x8e\x74\x50\xc4\xa2\x52\xc9\xba\x08\x39\x4c\xd5\x5e\x31\xb5\xaf\x4c\x3e\x06\xb1\x76\x6a\xd9\x0d\xc3\x27\x18\x7b\x67\xc9\x85\xf4\x98\xfd\xc0\xaa\x2f\x8b\x60\xf8\xb9\x42\x8b\xe7\xa5\xb6\x64\x97\x87\xbb\x17\x0a\xd3\x42\x7e\x4b\xf6\x99\x9a\xeb\x49\x2b\x1b\xea\xd7\x84\x26\x39\x4c\x74\x4c\xdb\xcc\x6d\x05\x0c\xdb\x3d\x3b\x5e\x7d\x6b\x96\xcd\x28\xe3\xc7\xc3\xb1\x07\xcf\xd7\xbf\x05\x8c\x22\xa0\xd9\x5a\xe2\xba\xc1\x4a\x70\xc6\x27\x0b\xdf\xb0\x4d\xd7\x16\x7f\x22\x05\x1c\x9c\x87\x51\x9e\x3b\x6c\x34\xe0\xff\x69\x13\xc7\x28\x8f\x3d\x4d\xbf\x47\x8c\x6f\x70\x75\xee\x0c\x46\x97\x99\xf9\x43\x1e\xe3\x12\xe1\xee\xd2\x4e\x29\xb5\xfe\x1e\xd9\x38\x21\x45\x3c\x1b\xbf\x6a\x5d\x3e\x17\x93\x64\xa4\xc8\xe5\x4c\x59\xfa\x39\x76\xf8\x19\x1b\xfc\xde\xb4\x4a\xe6\x18\xfd\x8e\xef\xf8\x1d\x7f\xf2\xd8\x57\x62\x7c\x60\xa5\xc3\x93\xd8\xe5\x41\x76\xf6\xcc\x49\xde\xd5\xa3\xf2\xdf\x72\xe8\x19\x46\x8a\xac\x9b\x51\xb0\x8c\xe0\x12\x64\xfe\x38\x8f\xcc\x16\xb0\x9f\xa2\xac\xc7\x9c\x39\x5a\xf3\x67\x71\xfa\xec\x27\x33\x1f\xaf\xc3\xd4\xbd\x28\xd8\x57\x0c\x77\x05\x93\x74\x11\x55\xc7\x78\x29\xa9\x49\x0c\xe4\x72\xf2\x2c\xdd\xcd\xa1\x7e\x93\xb7\x96\xc2\x4a\x2f\x1d\x17\xa8\xf8\x53\xfd\x19\x41\xd1\x7c\xd7\x9b\x04\x15\x9c\xe2\xa2\xd2\xc9\x28\x22\xb6\x23\xc3\x24\x8b\x4a\x62\x2f\x6c\x96\xc9\x90\x29\x45\x3a\x61\xf0\xfc\x9e\x72\xfe\xf1\xa5\x4c\xda\x08\xf9\x46\xaa\xfb\x61\x9b\xa6\xeb\x40\x7b\xff\xec\x81\xff\x67\x0f\x98\x54\xd8\xcf\x49\x5d\x7c\x53\x81\x77\x49\x81\xfb\x7f\x45\xf8\x37\x00\x00\xff\xff\x43\xfd\x73\xdd\xab\x13\x00\x00")

func bundleJsBytes() ([]byte, error) {
	return bindataRead(
		_bundleJs,
		"bundle.js",
	)
}

func bundleJs() (*asset, error) {
	bytes, err := bundleJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bundle.js", size: 5035, mode: os.FileMode(420), modTime: time.Unix(1471739881, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promiseJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x6b\x6f\xdb\x46\x97\xfe\x6c\xfd\x8a\x89\x3e\xbc\x4b\x35\x12\x9d\x04\x69\x81\x46\xf5\x2e\xb2\xad\x53\x78\xd1\xb8\xd9\xd8\x41\x51\x04\x41\x41\x91\x43\x69\x1a\x8a\xc3\x90\x43\x29\x4a\xe3\xff\xbe\xcf\x39\x73\xe1\x50\xb6\xdb\x74\x5f\xd4\x68\x6a\x8b\x9c\x39\xf7\xf3\x9c\x8b\xa6\x7d\x27\x45\x67\x5a\x95\x9b\xe9\x72\x32\xd9\x65\xed\x44\x88\xab\xeb\xe7\xd7\xe7\xbf\xbd\x3a\xbf\xfc\xe1\xe2\xf2\xc7\xb9\x38\x3d\x15\xd7\x1b\x89\x73\x59\x2b\x85\xd9\xd0\xbf\x56\x4a\xd1\xe8\xae\x53\xab\x8a\xae\x67\x46\x76\x22\x71\x17\x44\x2b\xb7\x99\xaa\x3b\xd1\xd7\x85\x2c\x55\x2d\x0b\xb1\x10\x59\x27\x54\x6d\x24\x9e\x14\xb3\xc0\xe1\xc5\x9b\x9f\x5e\x5c\xfc\xf4\xd3\xf9\x0f\xe2\x4c\x4c\xcb\xbe\x2a\x55\x55\xc9\x62\xca\x1c\x33\xd1\xb4\x7a\xab\xc0\x35\xcf\x6a\xb1\x92\xb8\x9e\x0a\x92\xc3\xb2\x13\xaa\xc3\x1f\xba\x95\x45\xa0\xf6\xfa\xfc\x7f\xce\xbf\xbf\xb6\xc4\x5a\xf9\xbb\xcc\x8d\xa7\xa5\x6a\x88\xac\xba\xd4\xde\x84\x28\xad\xcc\x8a\x85\xae\xab\xc3\x04\xb7\x7f\x0b\x72\xf2\xe1\x4a\x1a\x56\x52\xaf\x4a\xd5\xe5\x19\x78\x88\x5c\x6f\x9b\x56\x76\x1d\x3d\x87\x40\x85\xde\xd7\xa3\x7b\x57\xb0\x5f\xbd\x26\xbe\xe1\xd1\x74\x49\xb4\x56\x07\x70\xeb\xd4\xba\xa6\xd7\xb8\xbc\x15\x46\x0b\xd8\x58\x65\xb0\x1b\x2c\x56\xc8\x55\x66\xe8\x6f\x31\xd5\x8d\x51\x5b\xf5\x29\x33\x4a\xd7\xd3\xd9\x64\x82\xdb\x57\x30\xf2\xc6\x98\xe6\xd9\xe9\xe9\x7e\xbf\x4f\x57\x55\x2f\x7f\xcf\x76\x59\x0a\x71\x4e\x9f\x5e\x5e\x9d\x5e\x35\x52\x16\x8b\xbe\x59\x1c\x74\xdf\x2e\x7e\x91\xab\x4e\xc1\x0f\x8b\xbd\x32\x9b\x45\xb6\x78\x91\x75\x46\xb6\x8b\x4e\x9a\x6b\xb5\x95\xba\x37\x8b\xbe\x83\x18\x8b\x4e\xeb\x7a\xc2\x2e\x85\x09\xf1\x5f\x26\x76\xb2\x3d\x88\x12\xc7\xc5\x34\xeb\x0e\x75\xbe\x69\x75\xad\xfb\x6e\x2a\xca\x4a\xef\xa1\x7c\x6d\x5a\x5d\xc1\x87\x2a\x95\xa9\x50\x46\x1c\x94\xac\x8a\x2e\x44\x42\x56\x88\xac\x2e\x84\xfc\x28\xf3\x9e\xe2\xa0\x82\x91\xdb\x39\xb1\x58\xf5\x46\xd4\xda\x88\x6d\x9f\x6f\xec\xe3\x54\x5c\x18\x62\x5a\x66\x2d\x73\x94\x2d\xdf\xad\xd4\x7a\x43\x7f\x9b\x0d\x7c\xcd\x62\x8a\x41\xee\xa4\xac\xe7\x8f\x66\xa2\x84\x23\x98\xb3\xb5\x25\xf1\xed\x52\xe2\x72\x61\xa0\x44\xd5\x69\x4f\x90\x89\x68\x48\xd7\x12\x91\x8b\xed\x56\x16\x8a\xfc\xde\x6d\xd4\xb6\x9b\x73\x24\x1a\x30\x81\xa4\x2f\x7b\xc3\xf6\x16\x3f\xaf\x3a\xd9\xee\x9c\x30\x53\x8a\xde\x0a\x4e\x84\x05\xba\x3e\xcf\xe1\x78\xb5\x93\xc4\x29\xcf\xaa\xca\xc6\x71\x5b\xe3\xcf\x03\xb3\xff\xe5\xf9\xeb\x4b\x44\xfd\x33\x6b\xd0\x42\x83\x2e\xe9\xcc\xa2\x92\xbb\xc9\x4c\xab\x56\xef\xc1\x41\xbc\xb9\x10\x95\xd6\xcd\x5c\x40\x5a\xc4\x86\xd5\x94\x42\x13\x11\xd9\x48\x08\x59\x20\x24\x41\xf3\xe4\x04\x2e\xe5\xc0\x47\xc8\x42\x30\x26\x82\xcb\x24\x1e\x52\xa1\xaf\x11\x8d\x8d\xae\x49\x2e\xcf\x02\x0a\xb5\xe9\xc8\xaf\xb5\x90\x3b\x59\x8b\x17\xcf\xaf\xae\xcf\x5f\x93\x93\x3b\x52\x55\x97\x1c\x53\x1d\x82\x6a\xad\x3a\x93\xae\x11\x2d\xfd\x8a\x63\xca\x07\xd8\xe9\xb7\xab\x6f\xbf\x7e\xfa\xa4\x78\x5c\x64\x4f\xb2\xc7\xdf\x3c\x2d\x1e\x3d\xfd\xfa\x1b\x32\xab\x11\x6b\x70\x44\x62\x37\xc4\xa8\xa1\xd0\x86\xfc\x14\x20\xf2\xa3\x61\xe1\xb2\x76\xdd\x6f\x65\x6d\x60\x67\x24\x9d\xfc\x98\xc3\x17\x6b\xc9\xbe\xcb\xc4\x93\xaf\x3f\x8a\x8e\x62\x16\xef\x72\xf8\xaf\x43\x38\x25\x6f\x08\x57\x6a\x08\x56\xf6\x75\xce\xce\x80\x42\x44\xda\xd3\x3d\x05\xcd\x6e\x46\xc8\x24\x28\x74\x91\x65\x89\x3f\x9a\xcc\xc4\x1f\x94\xc1\xf4\xae\xfc\x80\x37\x6f\xdf\x71\x0a\x07\x52\x1f\x7a\xd9\xcb\x25\x4e\x08\xbc\xbf\x82\x29\x0d\x0e\x3d\xb2\xf8\xb2\xd3\xaa\xf0\xb1\xb6\x51\xa5\x01\x31\xb8\x84\x7c\x6f\xf0\x8f\x1e\x67\x6c\x7d\x03\xa0\x63\x97\x13\x8a\x41\x45\xa0\x9b\x86\xd9\x91\x6a\x5b\x8a\x05\x91\x6f\xfa\xfa\x7d\x47\x76\x7d\xfc\xe8\xc9\x53\x91\xac\xfa\xb2\x94\xed\x95\xfa\x24\x67\xcc\x78\xf8\x0c\xde\x74\x84\x24\x0e\x12\x52\x48\xfd\x2f\x49\xc9\xba\xd0\xf9\xfd\x46\x01\x0f\x92\xf2\x43\x5a\xc9\x7a\x6d\x36\x60\xeb\x64\x9f\x91\xdc\x1c\x2d\x59\x03\x70\xcc\x90\x54\xb8\x8d\xc8\x12\xb5\xdc\x87\xac\x84\xf5\x88\x00\x68\x17\x7d\xeb\x70\xc7\x25\xa7\xf3\x3f\xa3\x18\xf3\xb2\x1c\xc9\x38\x6f\x1d\x8f\x77\xc9\x8c\x91\xab\xd6\xc1\xaf\xe4\x3b\xb8\x20\x4d\x6f\x1d\x7e\xf8\xf0\x1d\x74\x1a\x70\xd0\x62\xad\x75\xed\x91\xed\xc8\x72\x85\x6c\x25\x4c\x21\xeb\x5c\x0e\x06\xf8\xbd\x07\xee\x90\x15\x18\xc9\xe9\x47\x95\xa4\xbd\xf3\xd6\x59\x64\xbf\x59\x90\x97\x84\x48\xbb\xa6\x52\xb9\x4c\xe0\xce\xe8\xc8\x32\x3a\x11\x1c\xee\x1f\xde\x4c\xfc\xff\x6f\xc8\x09\x90\xb6\xed\x6b\xb6\x4f\x70\xc3\x20\x18\x43\x61\xbb\x61\x28\xac\x0e\x8c\x1b\x8c\x91\xf8\xed\x2b\x9f\x0b\xbd\xfc\xc3\xaf\x9c\xec\x77\x44\x26\x98\x7c\x15\xe5\x24\xb1\x62\x94\x02\x9d\x7d\x76\xf0\xb8\xd0\x89\x4d\x66\x33\xd9\xa2\x06\x9c\xcb\xa8\x53\xaf\x27\xde\x20\xe6\xd0\x48\xb8\xce\x23\x56\x00\xac\x07\x67\x67\xb7\x0a\xd1\x60\x27\xca\x05\xd5\x76\x66\x2e\xc8\x29\x54\xfb\x44\xa1\x76\x8c\x4f\x99\x31\x08\x20\xc9\x10\xf5\xc3\xcf\x2f\xe9\xd7\x54\x5b\xaa\x53\x77\x9b\x74\x2b\x48\xad\x42\xe7\x9c\xd5\xa9\xa5\x72\x5e\x49\xfa\x94\x4c\x41\x6b\x1a\x2c\x4e\xa7\xb7\x1a\xa7\x29\x18\x8f\xe5\x4c\x82\x81\xc3\xf9\xad\x4e\x1d\xbf\xa4\x40\xe5\x1d\x5c\x0b\xc9\x5a\xb5\xa2\x52\xf2\x4c\x98\xb6\x97\xde\x79\xb8\xe9\xfe\x6c\xa5\xe9\xdb\x01\x31\x92\x38\x30\x04\x44\x4e\x81\xfb\xcf\x3d\x95\x64\x9a\xa1\x0b\x78\x14\x45\xc6\x0d\xe7\x51\xab\xd6\x6b\x18\x90\x04\x5b\x65\xf9\x7b\x18\xc0\x46\xc7\x57\xa7\xce\x71\xa7\x64\xf8\x4b\x7d\xdb\xe6\x0b\x9b\x84\xce\x9f\x35\xe5\xc8\x8a\x3c\x8a\xa7\x48\xb7\x05\x9c\x59\x17\x54\xde\x2f\x75\x21\x39\xf0\x5f\x5e\x5d\x9c\x1f\x7b\x72\x54\x9a\xee\xf4\xe2\x17\x28\x1b\x13\x89\x4c\x1c\xc2\x7d\x12\x82\x00\xf5\x0a\x91\xe7\x54\x5d\x00\xf1\x74\x5f\x15\xf5\x7f\x18\x2e\x27\x1d\xc2\x80\x20\x9a\xeb\x34\x40\x5b\x36\xc6\x36\x05\x1a\xc1\xe8\x63\x74\xf2\xe7\xc2\x44\xf5\x3a\x08\x42\x66\x1f\x52\x6e\x96\x58\x0f\x7a\x10\xf3\xf9\x10\x70\x9f\x0a\xcc\x1e\x2d\x20\xc9\x64\xdb\x26\x1b\x9e\xdc\xb1\x58\x87\xc0\xc8\xd9\x7b\x79\x7c\x51\xb3\x17\x5d\x17\x92\x6d\xa9\x74\x0b\x7e\xe0\xab\xd1\xe4\xb6\xe4\x65\x3d\xa4\x28\x6a\x59\xdf\x6d\xc6\x44\xb9\x9a\xd5\x07\xd7\xcc\x72\x39\xf0\xd4\x40\x5b\xe3\x33\xf5\x59\x1e\x24\x5d\x89\x49\x89\x0e\x91\x76\xa1\x4a\xfe\xbe\x1b\xc9\xe1\xf0\xc7\x8c\xe7\x7d\x43\xcc\x0a\xee\x6a\xd0\xc6\xd9\x7c\x15\x60\xd3\x02\x73\xde\x2b\x78\x4b\x97\x65\xc0\x28\x72\x9f\x33\xb8\x43\x9d\x84\x03\xfb\x06\x0c\x9d\x81\x41\x73\xe1\x7e\xc4\x7f\x9f\xff\x78\x71\xc9\x64\x49\x09\x31\xcd\x2b\xd8\x75\x2a\x38\xce\x14\xab\x89\x2e\x49\x86\xf3\xfc\x33\x99\x04\x1b\xbc\xb2\x1d\x38\xa3\x9a\xf5\x34\x88\xc7\xad\xf4\xd9\x78\x54\x58\x9e\x50\x3b\x06\xca\x08\x36\x7b\x20\xcc\x04\x2a\x1a\x07\xb8\xfd\x41\x81\xa9\xa5\xf5\x6f\x96\x9b\x9e\xda\x29\x87\x82\x5c\xe0\xd8\xfd\x64\xed\x19\x73\x65\x9e\x39\x57\xf8\xe5\xc9\x09\xb1\xc9\x2b\x65\x7d\x51\x60\xa4\x70\x45\xb3\xc1\x7c\x01\x3b\x62\x4e\x10\xdf\x5d\x29\x2a\x33\x8f\xd3\x47\xe9\x93\x10\x6e\x55\xf6\xe9\x80\x02\x05\xd1\x6a\xa3\x38\xa7\xff\xd3\x05\xe4\x45\x09\x68\x0c\x7a\xef\x81\xf1\x68\x54\x72\x55\x2a\x92\x96\x83\x0b\xa1\xc7\xb9\xc3\x5e\x27\x77\xa0\x05\xd3\xd5\x4e\x9e\xda\x51\x23\x5c\xee\xc4\x4a\x43\x53\xdb\x96\xa9\x2e\x0a\x10\xae\x6b\xc1\x92\x0e\x30\xc9\x86\x74\xce\x35\x29\x78\x9d\x0c\x15\xcc\xc7\x2a\x22\x6f\x0c\x71\x5b\x99\x3a\xf6\xfc\x6e\x40\xb6\xb9\xcd\xae\x20\xdd\xa0\xd3\x9d\x52\xa5\x5f\xca\x8b\x54\x3c\x62\x35\x1b\x58\x8d\x0c\x70\xaf\xfe\x37\x13\x00\x92\x0b\xa9\x14\x25\xce\x68\x82\x42\xe8\xff\x07\x51\x7a\x8e\x4a\xf3\x4d\x64\x45\xdc\xa7\xb8\x0d\xe7\x9e\xd1\x50\xc7\x3a\x01\xcd\xdd\x7c\x47\x7f\x41\x82\x9a\x7e\x63\x52\xcb\x37\xf4\x07\x63\x5d\x75\x98\xda\x5e\xde\x58\x4c\x9a\x4e\x18\x02\xf8\xfe\xb3\x41\xd9\x5d\x86\x96\xd7\xab\xcb\xe0\x3c\xc4\x36\x61\xf2\x28\xba\xc7\x80\x1c\x65\x38\x53\x41\x46\x5b\x4f\x1e\xe1\x36\x53\x74\x06\xa4\xca\x78\x0d\x5d\xce\xdb\x56\xb7\xc9\x14\x25\x4a\x6e\x01\xb5\x50\xd5\xbb\xcb\xcf\xbc\x1c\x65\x9d\xac\xca\xe9\xcc\x63\xc9\x38\x5c\x18\xb4\x70\x4b\xb6\x2e\x65\x8e\xc5\xf9\xd7\xbf\x42\xa9\x19\xe4\x9b\x7a\xcd\xa7\xe2\xf3\x67\x71\xfb\xb5\x5e\xb1\x59\x67\x43\x04\x00\x86\xa2\x68\xe0\x46\x9b\x01\xea\x8c\x4b\xf3\x32\x74\x18\x82\x0c\x4d\x63\x99\xee\xd7\x9b\xff\x1a\x5d\x20\x0f\xe1\x3c\xb3\x49\xe9\xc3\x50\x89\xa3\x7a\x68\x4f\x8d\x64\x1c\xc7\x21\xf5\xec\xf0\x28\x27\x23\x85\xdd\x40\x4f\x24\x48\x7f\x54\x2e\x45\x93\xd7\x9e\x7a\x72\x1b\x15\x33\x6b\x46\xab\x5f\x66\x8b\x46\x3c\xac\xfc\x69\x16\x37\xd2\x4a\xce\xd3\x39\x81\x41\x24\x0a\x3d\x4f\x49\x10\x6b\xeb\x79\xf4\x2a\xca\xa4\x36\x1b\x2b\xe0\x15\x66\x7b\xdd\x7e\x25\x82\x65\x51\xa7\x3b\xb9\xbc\xf5\x3a\x4a\x7a\x90\x3e\x7e\x7f\x33\xfa\x7c\x73\x9f\x4c\xed\x3f\x20\x13\xc7\x36\x28\xff\x85\x48\xa3\xf7\x3e\x89\x8e\xcf\xde\x08\x4e\x64\x91\x8c\xba\xfd\x41\xc4\x91\x17\x86\xcc\x8a\x1b\xff\x31\x69\xdf\xf3\x4f\xc2\x95\x71\xe9\x0a\x3b\xa8\xe5\x70\x62\xe7\xc3\x35\x4a\x72\x68\x9a\x7b\xee\xd4\x90\x24\x77\x36\x64\xd4\x45\x25\x14\xf4\xb5\x1d\x34\x2b\xfc\xa2\x9b\xae\x03\x58\xe2\xf9\x77\xa2\xc2\xaf\x87\x0f\x67\x23\x6b\xb0\x5f\xbf\xe7\x9a\xc6\xac\xde\xd6\x18\x65\x2d\x3c\x2d\x27\xb1\x01\xe1\x59\x86\x32\x52\x3b\x42\x32\x9a\xb9\x74\xfd\x6f\x41\xd9\x1d\xc6\xf1\x2b\xb5\x23\xdb\x58\x66\x11\x2e\xf9\x62\x6c\xc1\x29\xcd\x97\x41\x0a\xf7\xe6\xff\x67\x39\x77\xf9\x2f\x8d\x47\xb6\x70\xb6\x73\x57\xd8\x7c\xce\x26\x63\xfb\x09\x21\x2b\x37\xfd\x92\x7c\x0f\x7c\x41\xea\xfa\x86\x77\x7c\x6f\xea\x3c\x03\x84\x99\xd7\x4c\x15\x52\x32\x58\x7b\x7e\x80\x0f\x78\x4a\xa6\x95\x5e\x27\xd3\x5f\x75\x8f\xf6\x0d\x8d\xaf\x6f\x94\x52\xf1\xaa\xe2\xd9\xd7\xc6\x70\xeb\x49\x60\x90\x99\x7a\x71\xfc\x6f\xb2\x74\xfe\x3e\x72\x29\x81\x4a\xe4\x50\x5d\xbf\x98\x63\x88\x7f\x1d\x77\x0b\x8d\x9b\xae\x7c\x5f\xe6\x14\x1a\x3c\x40\xc5\xd4\x49\x7a\x78\x26\x88\x84\xfb\x54\xd3\xa7\xd7\xfe\x53\xf3\x4c\x34\x36\x2d\xa2\x00\x8f\xdd\x7f\x2b\x5e\xe2\x89\x72\x6f\x17\xc1\xae\xd9\xe2\x66\xce\x71\xdf\xf6\x3c\xd7\xa2\x55\x5a\xd0\x53\x6e\xaa\xdd\x2b\xd4\x38\x9c\xb7\xdb\x07\x6e\xe5\xb2\xb6\xc5\x00\x9c\xb8\xb9\x14\x02\xd4\x92\x66\xde\x8c\x56\x91\x08\x05\x59\x96\x2a\xc7\xcd\xfc\x30\x8b\xd6\x02\xf6\xee\xe0\x7c\xfb\xd9\x76\xdd\x96\x51\xf0\x76\xf0\xf2\x70\x8e\xda\x47\x7b\xea\x9d\x3d\x75\xc3\xa7\xdc\xa4\x67\x55\xa7\xd6\xef\xf2\xe7\xeb\x41\x3b\x2e\x30\x7b\xbb\x85\xe6\x5d\x85\xf2\x03\x17\x1a\xd6\x84\xe2\x79\x36\xd4\xa4\xa3\x6a\x62\x07\xc1\x76\xb4\x6a\xe1\x3d\x96\x4f\x14\xe6\x39\x40\x75\xe6\x9f\xef\x96\xf7\xe5\x4b\xe4\x00\x9a\xe2\x63\x27\xd8\xdd\x41\x97\xb7\xaa\x31\x6e\x53\x35\x92\x26\xeb\xb8\xe3\x0e\x7b\x16\x6b\xd2\x2e\xf2\x76\xc0\xc2\xfb\xb1\xc9\xda\x6f\x2e\xe2\x02\x34\x32\xf5\x9d\xf9\x18\x9f\xf7\x69\xe8\x20\xd9\xb5\x49\xcd\x90\x08\xae\x95\x8b\x72\x21\x2f\x03\xb2\xc5\x5d\x15\xb9\x26\xa9\xfb\xaa\x42\x8b\x5e\xd6\x2e\x95\xc8\x40\xc8\xd2\x9d\xac\x15\x2f\x9a\xb6\xd2\x6c\x34\xa9\x1c\x1a\xc3\x2f\x24\x8c\x77\x5f\x40\xd7\x8e\x0f\x94\x94\x14\xb5\x8f\x31\x6c\xf8\xf5\x80\x25\x48\xfb\x75\x7a\xeb\x1b\x3b\x1e\x72\xa9\x57\xea\xd0\xde\x1a\xf2\x80\x6e\xd5\x9a\xc7\x73\x7f\x24\xac\x90\x8f\xfc\xb7\x92\x60\xe1\xbe\x80\xa1\x66\x2b\x4c\x28\xa9\x15\xe2\x52\x1b\xf4\xb6\xcc\x7b\x43\xbe\xd6\x94\x44\x74\x51\xdb\x1d\xd7\x2d\x46\x0b\x61\xfb\xa6\x2d\x12\xb1\x33\x34\x78\x1f\x47\x0c\xfe\xb3\x7b\x7b\xe6\x48\x7c\x42\x43\x1d\x59\x91\xb6\xea\xee\xf1\xcb\x2e\x4c\x0f\xc3\x13\x8a\xea\xe1\x03\x1a\xcf\xe9\xb5\xef\xca\x7d\x46\x1c\xcd\x41\xce\x19\x31\xd6\x45\x95\x8e\x65\x9c\xbb\x38\x0b\x53\xfc\x68\x05\x71\x67\x89\x71\xbd\x82\xed\xbe\x23\x81\xed\xc6\x93\x77\x74\xbc\x7e\x28\x33\x85\xf9\x15\x03\x65\x6d\x90\xe3\x70\x91\x37\x58\x56\xd1\xb7\x0e\x07\x6f\xa6\x82\x56\xa3\xfe\x9b\x26\x1f\xdd\x73\xb1\xed\x86\x4d\xd5\xd6\x76\xa8\x83\x3c\xbb\x71\x93\xe5\x1b\xba\xdd\xf1\x0c\xf7\x37\xa4\x21\x4d\x0a\x8a\xa6\xdb\xc3\x9c\x6c\x8f\xd9\xd9\x6e\xa9\x8d\xe7\xb8\xbf\xab\xfd\xc0\xcf\xe6\xf1\x6c\xe2\x92\x79\x5a\xc8\x2a\x3b\x8c\x23\xc3\xf2\x3f\x71\x0e\xf5\x75\x92\x0f\x26\x6c\x28\xbe\x7b\xc3\x32\xa0\xd6\x50\x81\x18\x46\xc3\x30\x52\x56\xaa\x33\xd1\x5e\xe2\x08\x92\xe6\x22\x0c\xad\xd1\x40\x91\xa7\x87\x7b\xe6\x89\x78\xa6\xa1\xe0\x3b\x40\x3a\xea\x36\xd2\x83\x6d\xea\xe3\x2f\x04\x89\xb2\x47\x2e\x14\x9a\xd0\x81\xd3\x1d\x0f\x64\xa1\x65\x8d\xbb\x6b\x7b\xd8\x99\xbb\x8d\xd6\x60\x03\x5c\xc6\xf4\x98\x8f\x70\xdf\xaa\xb8\x1d\x08\x6d\x99\xd2\x34\xa5\xb1\x39\x52\x3d\x06\xd7\xd0\xe3\xdc\x56\xfe\xbe\x61\xea\x5e\xe5\xeb\xdb\xca\x1f\x35\x50\xff\x8c\xfe\x76\x7a\x70\x9c\xee\xb7\x00\x5e\x4c\xbf\xb7\xeb\xab\x61\x48\x2b\x35\x7d\xff\x21\x92\x1e\xe8\xa5\xcc\x21\x5e\x1f\x10\xce\x56\xf4\xfd\x98\x43\x3f\x17\x7a\x43\x4c\xd9\x59\x57\x28\x43\x63\xf6\x6c\xd8\x4c\xf8\x51\xfc\x6c\xb4\x26\xb0\x8a\x91\xc1\x3e\xdd\xd5\x84\x7d\x0a\x86\xa1\xb3\xcb\x49\x80\xb0\x4f\xcb\x78\xeb\xe1\x70\xf5\x2c\xce\xd0\xf6\x0b\x48\x07\x33\xde\x4b\x99\x33\x2a\x26\x6c\x53\xef\xe4\x4f\x90\x54\xdc\x05\xa5\xc8\xd5\x93\x08\x47\xc3\x89\x6d\xf7\xf9\xb3\xdd\xa1\x9f\x50\x01\x8f\x38\x53\xef\x13\xf1\x6d\xb2\x41\x1f\xdc\xee\x2b\x1e\x0b\xde\xbe\xb3\x5d\x4e\x9b\x73\x77\xef\x41\xfe\xd5\x2d\x85\xf9\x4b\x19\x77\x2d\xea\x61\x30\xf7\xeb\xbe\x36\xa3\xaf\xce\xda\x26\x69\xe6\x42\xc5\x33\xcf\x83\x26\xda\x6b\x34\x76\x39\xf0\x60\x9c\x06\xbe\x05\x06\xe7\x23\x8f\x27\x8d\x0b\x68\x7b\xd1\xef\xe1\x82\x66\x87\xdd\xb8\x98\xb0\x90\x6f\x15\x7d\x05\x76\xd8\x45\xe3\x67\xfe\xf0\xe1\x78\xc3\x41\x4a\x9f\x21\xac\xdd\x1c\x33\x63\xcd\x87\x59\xde\x12\x1a\xfa\xa3\xf9\x31\xe3\xfa\x88\x31\x5f\xb6\x0b\xa5\xdd\x6c\x3c\xe7\x7a\x40\x8d\xe6\xa9\x8f\xfc\x0d\x18\x7e\x7d\x37\x88\x80\x8f\x7e\x86\x22\x2b\x66\x6f\x3f\x62\x5c\xfa\x18\xd6\xf3\x2f\x70\xf7\x93\x6c\xb5\x70\x7b\x6b\xee\xd5\xbb\x79\xd8\x52\x45\x2d\xf0\xc4\x1b\x3e\x68\x37\x89\x84\x3c\xd6\x70\x88\x5e\x3a\x80\x30\xfa\xbf\x00\x00\x00\xff\xff\x77\xed\xf9\x41\x7f\x22\x00\x00")

func promiseJsBytes() ([]byte, error) {
	return bindataRead(
		_promiseJs,
		"promise.js",
	)
}

func promiseJs() (*asset, error) {
	bytes, err := promiseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "promise.js", size: 8831, mode: os.FileMode(420), modTime: time.Unix(1472768463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bundle.js": bundleJs,
	"promise.js": promiseJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bundle.js": &bintree{bundleJs, map[string]*bintree{}},
	"promise.js": &bintree{promiseJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

